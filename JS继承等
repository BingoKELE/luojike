第一种（call继承）：构造函数绑定，即用call(apply)把父对象的this指向改为子对象
缺点：不能继承原型上的属性和方法; 不能继承prototype的东西

第二种：prototype模式，即把子对象的prototype对象指向Animal的一个实例;
缺点：如果子对象的prototype对象上有属性或方法时，将被清除;
注意：当改了prototype对象的constructor时，记得改回来，否则将造成继承链紊乱;

第三种：直接继承prototype，即child.prototype = parent.prototype;
优点：相比第二种效率更高，比较省内存;
缺点：如果子对象的prototype对象上有属性或方法时，将被清除;
且子对象的prototype对象修改后父对象的prototype也会被修改;

第四种：利用空对象作为中介，第三种的升级版;
缺点：如果子对象的prototype对象上有属性或方法时，将被清除;
且子对象的prototype对象修改后父对象的prototype也会被修改;
function extend(Child, Parent) {

　　　　var F = function(){};
　　　　F.prototype = Parent.prototype;
　　　　Child.prototype = new F();
　　　　Child.prototype.constructor = Child;
　　　　Child.uber = Parent.prototype;
　　}
属性共享 当某个子类修改父类的引用类型数据时 另外的子类也会同步修改

第五种：拷贝继承
缺点：只能继承原型上的属性和方法;
优点：如果子对象的prototype对象上有属性或方法时，不会被清除,
且子对象的prototype对象修改后父对象的prototype不会被修改;
总结：继承加在原型上的属性和方法时用第五种，而继承写在构造函数里的属性和方法则用第一种，两则结合用
